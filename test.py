import unittest
import pandas as pd


# Compute the total revenue generated by the online store for each month in the dataset
# Extract the month from the order_date column
# Calculate the revenue for each order by multiplying the product_price and the quantity
# Group the data by month and sum the revenue
def calculate_monthly_revenue(data):
    data['order_date'] = pd.to_datetime(data['order_date'])
    data['total_price'] = data['product_price'] * data['quantity']
    data['month'] = data['order_date'].dt.to_period('M')
    monthly_revenue = data.groupby('month')['total_price'].sum()
    return monthly_revenue

# Compute the total revenue generated by each product in the dataset
# Group the data by product_id and product_name and sum the revenue
def calculate_product_revenue(data):
    data['total_price'] = data['product_price'] * data['quantity']
    product_revenue = data.groupby('product_name')['total_price'].sum()
    return product_revenue

# Compute the total revenue generated by each customer in the dataset
# Group the data by customer_id and sum the revenue
def calculate_customer_revenue(data):
    data['total_price'] = data['product_price'] * data['quantity']
    customer_revenue = data.groupby('customer_id')['total_price'].sum()
    return customer_revenue

# Identify the top 10 customers by revenue generated
# Sort the customer revenue in descending order and take the first 10 rows
def identify_top_customers(data, top_n=10):
    data['total_price'] = data['product_price'] * data['quantity']
    top_customers = data.groupby('customer_id')['total_price'].sum().nlargest(top_n)
    return top_customers


# Writing Unit Tests for the above functions
class Test(unittest.TestCase):

    def setUp(self):
        # Sample data for testing
        self.sample_data = pd.DataFrame({
            'order_id': [1, 2, 3, 4],
            'customer_id': [101, 102, 101, 103],
            'order_date': ['2022-01-01', '2022-01-02', '2022-02-01', '2022-02-15'],
            'product_id': [1, 2, 1, 3],
            'product_name': ['A', 'B', 'A', 'C'],
            'product_price': [10.0, 20.0, 10.0, 15.0],
            'quantity': [2, 1, 3, 1]
        })

    def test_monthly_revenue(self):
        monthly_revenue = calculate_monthly_revenue(self.sample_data)
        expected_result = pd.Series([40.0, 45.0], name='total_price', dtype='float64', index=pd.PeriodIndex(['2022-01', '2022-02'], freq='M'))
        expected_result.index.name = 'month'
        pd.testing.assert_series_equal(monthly_revenue, expected_result)

    def test_product_revenue(self):
        product_revenue = calculate_product_revenue(self.sample_data)
        expected_result = pd.Series({'A': 50.0, 'B': 20.0, 'C': 15.0}, name='total_price', dtype='float64', index=['A', 'B', 'C'])
        expected_result.index.name = 'product_name'
        pd.testing.assert_series_equal(product_revenue, expected_result)

    def test_customer_revenue(self):
        customer_revenue = calculate_customer_revenue(self.sample_data)
        expected_result = pd.Series({101: 50.0, 102: 20.0, 103: 15.0}, name='total_price', dtype='float64', index=[101, 102, 103])
        expected_result.index.name = 'customer_id'
        pd.testing.assert_series_equal(customer_revenue, expected_result)

    def test_top_customers(self):
        top_customers = identify_top_customers(self.sample_data, top_n=2)
        expected_result = pd.Series({101: 50.0, 102: 20.0}, name='total_price', dtype='float64', index=[101, 102])
        expected_result.index.name = 'customer_id'
        pd.testing.assert_series_equal(top_customers, expected_result)

if __name__ == '__main__':
    unittest.main()
